// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"fiber-demo/app/demo/internal/biz"
	"fiber-demo/app/demo/internal/conf"
	"fiber-demo/app/demo/internal/data"
	"fiber-demo/app/demo/internal/server"
	"fiber-demo/app/demo/internal/service"
	"github.com/go-kratos/kratos/v2"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, registry *conf.Registry, confData *conf.Data, logger *conf.Logger, storage *conf.Storage) (*kratos.App, func(), error) {
	logLogger := data.NewLogger(logger)
	dataData, cleanup, err := data.NewData(confData, logLogger)
	if err != nil {
		return nil, nil, err
	}
	greeterRepo := data.NewGreeterRepo(dataData, logLogger)
	storageStorage := data.NewStorage(storage)
	greeterUsecase := biz.NewGreeterUsecase(greeterRepo, logLogger, storageStorage)
	greeterService := service.NewGreeterService(greeterUsecase, logLogger)
	xhttpServer := server.NewHTTPServer(confServer, greeterService, logLogger)
	grpcServer := server.NewGRPCServer(confServer, greeterService, logLogger)
	registrar := data.NewRegistrar(registry)
	app := newApp(logLogger, xhttpServer, grpcServer, registrar)
	return app, func() {
		cleanup()
	}, nil
}
